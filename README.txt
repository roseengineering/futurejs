
futurejs
========

A small, compliant Promises/A+ Javascript implementation.

The Implementation
------------------

This is a small and minimal, but nevertheless compliant, Javascript
promises implementation.  The library can be tested against the
Promises/A+ specification by running the following commands:

$ npm install
$ npm test

The library works with both Node.js and within the browser.  The
library either exposes itself as 'window.Future' or as an
module.exports object for CommonJS.

Off this namespace object two properties are exposed, 'Promise' and
'deferred'.  Both are functions.  The first function, 'Promise',
behaves like the RSVP's Promises function.  To create a promise the
'Promise' function is passed another function which itself takes two
parameters, both functions.  When the promise is instantiated this
passed function is called back with two arguments.  Calling the first
argument fulfills the promise while calling the second argument
rejects the promise.  These two functions take a single parameter as a
return value from the promise.

The second property exposed by the library is the function 'deferred'.
The 'deferrred' function is called without arguments.  It returns a
deferred object with properties 'resolve' and 'reject'.  Both are
functions for fulfilling or rejecting the promise.  The deferred
object also includes the property 'promise' which is the generated
promise object.

The promises object created by either of these two above instantiation
functions provides three methods.  They are as follows:

1) promise.then(onFulfill, onReject)

The 'then' method follows the Promises/A+ specification.  The two
remaining methods below are shortcuts for calling the 'then' method.
They are not part of the Promises/A+ specification.

2) promise.fail(onFail)

The 'fail' method is called when the promise is rejected. It
returns the new promise generated by the wrapped 'then' function.

3) promise.fin(onFin)

The 'fin' method is called when the promise is rejected or fulfilled.
The method returns 'undefined'.  It does not return the promise
generated by the 'then' function.

This source code is protected under the GPLv3 License.

Copyright 2013 Rose Engineering

Notes:
------
Promises/A+ Specification: http://promises-aplus.github.io/promises-spec/
RSVP.js: https://github.com/tildeio/rsvp.js

